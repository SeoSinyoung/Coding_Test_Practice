# 8가지 경우의 수를 모두 if문으로 풀어서 많이 길어요
# 중첩 if문이 아니라 and로 묶으면 range 범위 에러가 발생.
def solution(board):
    if 0 not in sum(board,[]) : # 폭탄이 없을 때
        return 0
    for i in range(0,len(board)) :
        for j in range(0,len(board)) :
            if board[i][j] == 1 : # 폭탄 인식
                # 1행이 아닐 때
                if i != 0 :
                    if board[i-1][j] != 1 : # 윗 행에 폭탄(1)이 없을 때
                        board[i-1][j] = 2 # 윗 행을 위험 지역(2)으로 등록
                # 마지막 행이 아닐 때
                if i != len(board)-1 :
                    if board[i+1][j] != 1 : # 아래 행에 폭탄(1)이 없을 때
                        board[i+1][j] = 2 # 아래 행을 위험 지역(2)으로 등록
                # 1열이 아닐 때
                if j != 0 :
                    if board[i][j-1] != 1 : # 왼쪽 열에 폭탄(1)이 없을 때
                        board[i][j-1] = 2 # 왼쪽 열을 위험 지역(2)으로 등록
                # 마지막 열이 아닐 때
                if j != len(board)-1 :
                    if board[i][j+1] != 1 : # 오른쪽 열에 폭탄(1)이 없을 때
                        board[i][j+1] = 2 # 오른쪽 열을 위험 지역(2)으로 등록
                # 1행 1열이 아닐 때
                if (i != 0) & (j != 0) :
                    if board[i-1][j-1] != 1 : # 왼쪽 대각선 위에 폭탄(1)이 없을 때
                        board[i-1][j-1] = 2 # 왼쪽 대각선 위를 위험 지역(2)으로 등록
                # 1행 마지막 열이 아닐 때
                if (i != 0) & (j != len(board)-1) :
                    if board[i-1][j+1] != 1 : # 오른쪽 대각선 위에 폭탄(1)이 없을 때
                        board[i-1][j+1] = 2 # 오른쪽 대각선 위를 위험 지역(2)으로 등록
                # 마지막 행 1열이 아닐 때
                if (i != len(board)-1) & (j != 0) :
                    if board[i+1][j-1] != 1 : # 왼쪽 대각선 아래에 폭탄(1)이 없을 때
                        board[i+1][j-1] = 2 # 왼쪽 대각선 아래를 위험 지역(2)으로 등록
                # 마지막 행 마지막 열이 아닐 때
                if (i != len(board)-1) & (j != len(board)-1) :
                    if board[i+1][j+1] != 1 : # 오른쪽 대각선 아래에 폭탄(1)이 없을 때
                        board[i+1][j+1] = 2 # 오른쪽 대각선 아래를 위험 지역(2)으로 등록

    result = sum(board,[]) # 1차원으로 열로 바꿔줌
    return result.count(0) # 안전 지역(0) 카운트

board = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0]]  # 16
board = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]] #13
board = [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1],[1, 1, 1, 1, 1, 1]] # 0
board = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1]] #15
board = [[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]] #8
board = [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]] #15
print(solution(board))